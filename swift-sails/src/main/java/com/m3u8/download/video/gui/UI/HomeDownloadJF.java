/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.m3u8.download.video.gui.UI;


import com.m3u8.bean.po.DownloadTask;
import com.m3u8.config.SpringUtil;
import com.m3u8.download.video.gui.UI.event.MenuEvent;
import com.m3u8.download.video.gui.UI.event.PopupMenuEvent;
import com.m3u8.download.video.gui.common.DownloadStatusCounter;
import com.m3u8.download.video.gui.common.MenuConstants;
import com.m3u8.download.video.gui.utils.LoadingUtils;
import com.m3u8.download.video.gui.utils.tool.FilterActionListener;
import com.m3u8.download.video.gui.utils.tool.PerformClosingOperation;
import com.m3u8.download.video.gui.utils.PositionAndStyleSetting;
import com.m3u8.download.video.m3u8.download.DownloadManager;
import com.m3u8.download.video.m3u8.uiEnum.DownloadStatusEnum;
import com.m3u8.download.video.m3u8.uiEnum.PopupMenuItemEnum;
import com.m3u8.download.video.m3u8.uiEnum.TableColumnEnum;
import com.m3u8.download.video.m3u8.utils.StringUtils;
import com.m3u8.service.DownloadTaskService;
import com.m3u8.service.SettingsService;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import java.awt.*;
import java.awt.event.*;
import java.util.List;


/**
 * @author xiaotian
 */
@Component
public class HomeDownloadJF extends javax.swing.JFrame {


    private DownloadManager downloadManager = SpringUtil.getBean(DownloadManager.class);

    private DownloadTaskService downloadTaskService = SpringUtil.getBean(DownloadTaskService.class);

    private SettingsService settingsService = SpringUtil.getBean(SettingsService.class);

    /**
     * Creates new form HomeDownloadJF
     */
    public HomeDownloadJF() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        startOrStop = new javax.swing.JMenuItem();
        playVideo = new javax.swing.JMenuItem();
        openInExplorer = new javax.swing.JMenuItem();
        CompleteOpen = new javax.swing.JCheckBoxMenuItem();
        delete = new javax.swing.JMenuItem();
        copyLink = new javax.swing.JMenuItem();
        moveFileTo = new javax.swing.JMenu();
        personalList = new javax.swing.JMenuItem();
        otherDir = new javax.swing.JMenuItem();
        top = new javax.swing.JMenuItem();
        bottom = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        newDownload = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        newDownload1 = new javax.swing.JButton();
        allJComent = new javax.swing.JCheckBox();
        downloadJC = new javax.swing.JCheckBox();
        completedJC = new javax.swing.JCheckBox();
        stopJC = new javax.swing.JCheckBox();
        errorJC = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        startAll = new javax.swing.JMenuItem();
        pauseDownload = new javax.swing.JMenuItem();
        cancelDownload = new javax.swing.JMenuItem();
        deleteDownloadedFile = new javax.swing.JMenuItem();
        openDownloadFolder = new javax.swing.JMenuItem();
        importDownload = new javax.swing.JMenuItem();
        exportDownload = new javax.swing.JMenuItem();
        resumeDownload = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        settings = new javax.swing.JMenuItem();


        startOrStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        startOrStop.setText(PopupMenuItemEnum.START.getChineseName());

        startOrStop.addActionListener(new PopupMenuEvent(startOrStop, jTable1));
        jPopupMenu.add(startOrStop);

        playVideo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        playVideo.setText(PopupMenuItemEnum.PLAY.getChineseName());
        playVideo.addActionListener(new PopupMenuEvent(playVideo, jTable1));
        jPopupMenu.add(playVideo);

        openInExplorer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openInExplorer.setText(PopupMenuItemEnum.OPEN_FOLDER.getChineseName());
        openInExplorer.addActionListener(new PopupMenuEvent(openInExplorer, jTable1));
        jPopupMenu.add(openInExplorer);

        CompleteOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        CompleteOpen.setSelected(true);
        CompleteOpen.setText(PopupMenuItemEnum.PLAY_WHEN_FINISHED.getChineseName());
        CompleteOpen.addActionListener(new PopupMenuEvent(CompleteOpen, jTable1));
        jPopupMenu.add(CompleteOpen);

        delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
//        delete.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        delete.setText(PopupMenuItemEnum.DELETE.getChineseName());
        delete.addActionListener(new PopupMenuEvent(delete, jTable1));
        jPopupMenu.add(delete);

        copyLink.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        copyLink.setText(PopupMenuItemEnum.COPY_LINK.getChineseName());
        copyLink.addActionListener(new PopupMenuEvent(copyLink, jTable1));
        jPopupMenu.add(copyLink);

        moveFileTo.setText(PopupMenuItemEnum.MOVE_TO.getChineseName());

        personalList.setText(PopupMenuItemEnum.PERSONAL_DIRECTORY.getChineseName());
        moveFileTo.add(personalList);

        otherDir.setText(PopupMenuItemEnum.OTHER_DIRECTORY.getChineseName());
        moveFileTo.add(otherDir);

        top.setText(PopupMenuItemEnum.TOP.getChineseName());
        top.addActionListener(new PopupMenuEvent(top, jTable1));
        moveFileTo.add(top);

        bottom.setText(PopupMenuItemEnum.BOTTOM.getChineseName());
        bottom.addActionListener(new PopupMenuEvent(bottom, jTable1));
        moveFileTo.add(bottom);

        jPopupMenu.add(moveFileTo);

        jMenuBar2.setToolTipText("");

        jMenu2.setText("Edit");

        jMenuItem1.setText("jMenuItem1");
        jMenu2.add(jMenuItem1);

        jMenuBar2.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        jSplitPane1.setOpaque(false);
        jSplitPane1.setRequestFocusEnabled(false);
        jSplitPane1.setVerifyInputWhenFocusTarget(false);

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        // 添加列名
        for (TableColumnEnum columnEnum : TableColumnEnum.values()) {
            model.addColumn(columnEnum.getColumnName());
        }
        // 初始化表数据
        initTableData(model);
        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jSplitPane1.setRightComponent(jScrollPane1);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 67));

        newDownload.setBackground(new java.awt.Color(42, 133, 246));
        newDownload.setForeground(new java.awt.Color(224, 235, 255));
        newDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/雷达图_radar-chart.png"))); // NOI18N
        newDownload.setText("嗅探");


        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("资源管理器");

        newDownload1.setBackground(new java.awt.Color(42, 133, 246));
        newDownload1.setForeground(new java.awt.Color(224, 235, 255));
        newDownload1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/下载_download-four.png"))); // NOI18N
        newDownload1.setText("新建");
        newDownload1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                newDownloadMouseClicked();
            }
        });

        allJComent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/全部_all-application.png"))); // NOI18N
        downloadJC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/用户下载_people-download.png"))); // NOI18N
        completedJC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/暂停_pause-one.png"))); // NOI18N
        stopJC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/暂停_pause-one.png"))); // NOI18N
        errorJC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/icon/nnetBeans/报错_caution.png"))); // NOI18N


        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1)
                        .addComponent(newDownload1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 37, Short.MAX_VALUE))
                                        .addComponent(allJComent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(downloadJC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(completedJC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stopJC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(errorJC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(allJComent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downloadJC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(completedJC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopJC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorJC)
                                .addGap(22, 22, 22)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newDownload1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 709, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("");

        fileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newMenu.setText("新建下载任务");
        newMenu.addActionListener(new MenuEvent(MenuConstants.NEW_MENU, this, jTable1));

        fileMenu.add(newMenu);

        startAll.setText("开始所有");
        startAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        startAll.addActionListener(new MenuEvent(MenuConstants.START_ALL, jTable1));
        fileMenu.add(startAll);


        pauseDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        pauseDownload.setText("暂停所有");
        pauseDownload.addActionListener(new MenuEvent(MenuConstants.PAUSE_DOWNLOAD, jTable1));
        fileMenu.add(pauseDownload);

        // 设置多组快捷键
        cancelDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        cancelDownload.addActionListener(new MenuEvent(MenuConstants.CANCEL_DOWNLOAD, jTable1));
        cancelDownload.setText("取消下载");
        fileMenu.add(cancelDownload);


        deleteDownloadedFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        deleteDownloadedFile.setText("删除已下载");
        delete.addActionListener(new MenuEvent(MenuConstants.DELETE_DOWNLOADED_FILE, jTable1));
        fileMenu.add(deleteDownloadedFile);

        openDownloadFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK));
        openDownloadFolder.setText("打开下载文件夹");
        openDownloadFolder.addActionListener(new MenuEvent(MenuConstants.OPEN_DOWNLOAD_FOLDER, jTable1));
        fileMenu.add(openDownloadFolder);

        importDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        importDownload.setText("导入下载");
        importDownload.addActionListener(new MenuEvent(MenuConstants.IMPORT_DOWNLOAD, jTable1));
        fileMenu.add(importDownload);

        exportDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exportDownload.setText("导出下载");
        exportDownload.addActionListener(new MenuEvent(MenuConstants.EXPORT_DOWNLOAD, jTable1));
        fileMenu.add(exportDownload);

        resumeDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        resumeDownload.setText("恢复所有下载");
        resumeDownload.addActionListener(new MenuEvent(MenuConstants.RESUME_DOWNLOAD, jTable1));
        fileMenu.add(resumeDownload);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        settings.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
                java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        settings.setText("设置");
        settings.setEnabled(true);
        settings.addActionListener(new MenuEvent(MenuConstants.SETTING));

        editMenu.add(settings);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1123, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 999, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 1034, Short.MAX_VALUE))
        );

        // 添加表格监听事件
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    jPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        // 添加表格模型监听器
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // 获取发生变化的行和列
                int firstRow = e.getFirstRow();
                int column = e.getColumn();
                String downloadStatus =
                        (String) model.getValueAt(firstRow, TableColumnEnum.STATUS.getColumnIndex());
                if (column == TableColumnEnum.STATUS.getColumnIndex()
                        && (
                        DownloadStatusEnum.DOWNLOADING.equals(downloadStatus)
                                || DownloadStatusEnum.CONNECTING.equals(downloadStatus)
                )
                        && PopupMenuItemEnum.START.getChineseName().equals(startOrStop.getText())) {
                    // 弹出菜单变成暂停
                    startOrStop.setText(PopupMenuItemEnum.PAUSED.getChineseName());
                    model.fireTableDataChanged();

                } else if (column == TableColumnEnum.STATUS.getColumnIndex()
                        && DownloadStatusEnum.PAUSED.equals(downloadStatus)
                        && PopupMenuItemEnum.PAUSED.getChineseName().equals(startOrStop.getText())) {
                    // 开始
                    startOrStop.setText(PopupMenuItemEnum.START.getChineseName());
                    model.fireTableDataChanged();
                }
            }
        });

        // 关闭前操作
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                PerformClosingOperation.SynchronizeDatabase();
                super.windowClosing(e);
            }
        });
        pack();
        PositionAndStyleSetting.windowCentered(this);
    }// </editor-fold>//GEN-END:initComponents

    private void newDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDownloadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newDownloadActionPerformed

    /**
     * New Download Link
     */
    private void newDownloadMouseClicked() {//GEN-FIRST:event_newDownloadMouseClicked
        DownloadSettingPage downloadSettingPage = new DownloadSettingPage();
        downloadSettingPage.setParentFrame(this);
        downloadSettingPage.setVisible(true);
    }//GEN-LAST:event_newDownloadMouseClicked


    private void initTableData(DefaultTableModel model) {
        initDownloadStatusCounter();
        List<DownloadTask> downloadTasks = downloadTaskService.selectDownloadTaskList();
        for (int i = 0; i < downloadTasks.size(); i++) {
            DownloadTask downloadTask = downloadTasks.get(i);
            String status = DownloadStatusEnum.COMPLETED.get().equals(downloadTask.getStatus())
                    ? DownloadStatusEnum.COMPLETED.get()
                    : DownloadStatusEnum.PAUSED.get();
            model.addRow(new Object[]{
                    i + 1,
                    downloadTask.getName(),
                    downloadTask.getDownloadUrl(),
                    downloadTask.getProgress(),
                    "",
                    status,
                    StringUtils.convertToDownloadSpeed(downloadTask.getDownloadBytes(), 1),
                    "",
                    downloadTask.getTimeConsuming()
            });
            // 赋值统计
            if (status.equals(DownloadStatusEnum.COMPLETED.get())) {
                DownloadStatusCounter.addFinishedCount();
            } else {
                DownloadStatusCounter.addStoppedCount();
            }
        }
    }

    private void initDownloadStatusCounter() {
        DownloadStatusCounter.setjFrame(this);
        DownloadStatusCounter.setModel((DefaultTableModel) jTable1.getModel());
        DownloadStatusCounter.setDownloadingJC(downloadJC);
        DownloadStatusCounter.setStoppedJC(stopJC);
        DownloadStatusCounter.setFinishedJC(completedJC);
        DownloadStatusCounter.setErrorJC(errorJC);
        DownloadStatusCounter.setAllJC(allJComent);
        DownloadStatusCounter.initJCText();
        setCheckBackgroundAndForeground(allJComent, downloadJC, stopJC, completedJC, errorJC);
        checkBoxSelectEventListener();
    }

    private void checkBoxSelectEventListener() {
        allJComent.addActionListener(new FilterActionListener(null, jTable1));
        downloadJC.addActionListener(new FilterActionListener(DownloadStatusEnum.DOWNLOADING.get(), jTable1));
        completedJC.addActionListener(new FilterActionListener(DownloadStatusEnum.COMPLETED.get(), jTable1));
        errorJC.addActionListener(new FilterActionListener(DownloadStatusEnum.CONNECTING_FAIL.get(), jTable1));
        stopJC.addActionListener(new FilterActionListener(DownloadStatusEnum.PAUSED.get(), jTable1));
    }

    /**
     * 设置普通颜色
     *
     * @param checkBoxes
     */
    private void setCheckBackgroundAndForeground(JCheckBox... checkBoxes) {
        for (JCheckBox checkBox : checkBoxes) {
            // 设置被选中时的颜色
            checkBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    JCheckBox source = (JCheckBox) e.getSource();
                    if (source.isSelected()) {
                        // 设置选中时的颜色
                        source.setBackground(new Color(69, 189, 246));
//                       source.setForeground(Color.WHITE);
                        // 将其他 JCheckBox 设置为未选中状态
                        for (JCheckBox box : checkBoxes) {
                            if (box != source) {
                                box.setSelected(false);
                            }
                        }
                    } else {
                        // 恢复默认颜色
                        source.setBackground(UIManager.getColor("CheckBox.background"));
                        source.setForeground(UIManager.getColor("CheckBox.foreground"));
                    }
                }
            });
        }
        allJComent.setSelected(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeDownloadJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeDownloadJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeDownloadJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeDownloadJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeDownloadJF().setVisible(true);
            }
        });
    }


    public void download(String downloadUrl, String fileName, String position, String suffix) {

        model.addRow(new Object[]{
                model.getRowCount() + 1,
                fileName, downloadUrl, "", "",
                DownloadStatusEnum.CONNECTING.get(), "", "", "", ""
        });
        model.fireTableDataChanged();
        LoadingUtils.showLoadingPage(this, 0.1F);

        // 创建并执行SwingWorker
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // 在后台线程中执行下载操作
                downloadManager.getTsUrl(downloadUrl, fileName, position, suffix);
                downloadManager.downloadFileByUrl(downloadUrl, model);
                return null;
            }

            @Override
            protected void done() {
                // 下载完成后的回调方法，在UI线程中执行
                // 更新UI界面或执行其他操作

            }
        };

        worker.execute();


    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem CompleteOpen;
    private javax.swing.JCheckBox completedJC;
    private javax.swing.JCheckBox allJComent;
    private javax.swing.JMenuItem bottom;
    private javax.swing.JMenuItem cancelDownload;
    private javax.swing.JMenuItem copyLink;
    private javax.swing.JMenuItem delete;
    private javax.swing.JMenuItem deleteDownloadedFile;
    private javax.swing.JCheckBox downloadJC;
    private javax.swing.JMenu editMenu;
    private javax.swing.JCheckBox errorJC;
    private javax.swing.JMenuItem exportDownload;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importDownload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu moveFileTo;
    private javax.swing.JButton newDownload;
    private javax.swing.JButton newDownload1;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openDownloadFolder;
    private javax.swing.JMenuItem openInExplorer;
    private javax.swing.JMenuItem otherDir;
    private javax.swing.JMenuItem pauseDownload;
    private javax.swing.JMenuItem personalList;
    private javax.swing.JMenuItem playVideo;
    private javax.swing.JMenuItem resumeDownload;
    private javax.swing.JMenuItem settings;
    private javax.swing.JMenuItem startAll;
    private javax.swing.JMenuItem startOrStop;
    private javax.swing.JCheckBox stopJC;
    private javax.swing.JMenuItem top;


    private DefaultTableModel model = new DefaultTableModel();

}

